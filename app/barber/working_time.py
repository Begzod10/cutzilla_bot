from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy import select
from datetime import datetime

from app.db import AsyncSessionLocal
from app.barber.models import Barber
from app.user.models import User
from .keyboards import working_time_keyboard
from app.states import WorkingTime

barber_working_time = Router()


@barber_working_time.message(F.text.in_(["üïí Ish vaqti", "üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"]))
async def working_time(message: Message, state: FSMContext):
    # keep your generic marker; you already use named states later
    await state.set_state("working_time")
    redis_pool = message.bot.redis

    # load user + barber
    async with AsyncSessionLocal() as session:
        user = (
            await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
        ).scalar_one_or_none()
        if not user:
            await message.answer("‚ùå Foydalanuvchi topilmadi.")
            return

        barber = (
            await session.execute(
                select(Barber).where(Barber.user_id == user.id, Barber.login == user.platform_login)
            )
        ).scalar_one_or_none()

    lang = (user.lang or "uz") if user else "uz"
    if not barber:
        await message.answer("Sartarosh topilmadi." if lang == "uz" else "–ë–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    start = (
        barber.start_time.strftime("%H:%M")
        if getattr(barber, "start_time", None)
        else ("belgilanmagan" if lang == "uz" else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    )
    end = (
        barber.end_time.strftime("%H:%M")
        if getattr(barber, "end_time", None)
        else ("belgilanmagan" if lang == "uz" else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    )

    # save last action in redis
    await redis_pool.set(f"user:{message.from_user.id}:last_action", "barber_working_time")

    text = (
        f"üïí Ish vaqti:\n‚è∞ Boshlanishi: {start}\n‚è∞ Tugashi: {end}"
        if lang == "uz"
        else f"üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n‚è∞ –ù–∞—á–∞–ª–æ: {start}\n‚è∞ –ö–æ–Ω–µ—Ü: {end}"
    )
    await message.answer(text, reply_markup=working_time_keyboard(lang))


@barber_working_time.message(F.text.in_(["‚è± Vaqt belgilash", "‚è± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è"]))
async def start_setting_time(message: Message, state: FSMContext):
    lang = "ru" if message.text.startswith("‚è± –£") else "uz"
    await state.update_data(lang=lang)
    text = (
        "üïí Boshlanish vaqtini kiriting (masalan, 09:00):"
        if lang == "uz"
        else "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):"
    )
    await message.answer(text)
    await state.set_state(WorkingTime.waiting_for_start)


@barber_working_time.message(WorkingTime.waiting_for_start)
async def handle_start_time(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "uz")

    try:
        start_time_obj = datetime.strptime(message.text.strip(), "%H:%M").time()
    except ValueError:
        await message.answer(
            "‚ùå Format noto‚Äòg‚Äòri. Masalan: 09:00" if lang == "uz" else "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: 09:00"
        )
        await state.set_state(WorkingTime.waiting_for_start)
        return

    await state.update_data(start_time=start_time_obj.strftime("%H:%M"))  # store as string
    text = (
        "üïí Tugash vaqtini kiriting (masalan, 18:00):"
        if lang == "uz"
        else "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00):"
    )
    await message.answer(text)
    await state.set_state(WorkingTime.waiting_for_end)


@barber_working_time.message(WorkingTime.waiting_for_end)
async def handle_end_time(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "uz")

    # parse end time
    try:
        end_time = datetime.strptime(message.text.strip(), "%H:%M").time()
    except ValueError:
        await message.answer(
            "‚ùå Format noto‚Äòg‚Äòri. Masalan: 18:00" if lang == "uz" else "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: 18:00"
        )
        return

    # get previously entered start time
    start_time_str = data.get("start_time")
    if not start_time_str:
        await message.answer(
            "‚ùó Avval boshlanish vaqtini kiriting." if lang == "uz" else "‚ùó –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞."
        )
        await state.set_state(WorkingTime.waiting_for_start)
        return

    try:
        start_time = datetime.strptime(start_time_str, "%H:%M").time()
    except ValueError:
        await message.answer(
            "‚ùó Boshlanish vaqti yaroqsiz. Qaytadan kiriting." if lang == "uz"
            else "‚ùó –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )
        await state.set_state(WorkingTime.waiting_for_start)
        return

    # store in DB
    async with AsyncSessionLocal() as session:
        user = (
            await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
        ).scalar_one_or_none()
        if not user:
            await message.answer("‚ùå Foydalanuvchi topilmadi.")
            return

        barber = (
            await session.execute(
                select(Barber).where(Barber.user_id == user.id, Barber.login == user.platform_login)
            )
        ).scalar_one_or_none()
        if not barber:
            await message.answer("Sartarosh topilmadi." if lang == "uz" else "–ë–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # Your model stores datetimes; keep that behavior (combine with today)
        barber.start_time = datetime.combine(datetime.today(), start_time)
        barber.end_time = datetime.combine(datetime.today(), end_time)
        await session.commit()

    start_str = start_time.strftime("%H:%M")
    end_str = end_time.strftime("%H:%M")

    await message.answer(
        "‚úÖ Ish vaqti saqlandi!" if lang == "uz" else "‚úÖ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
        reply_markup=working_time_keyboard(lang),
    )

    text = (
        f"üïí Ish vaqti:\n‚è∞ Boshlanishi: {start_str}\n‚è∞ Tugashi: {end_str}"
        if lang == "uz"
        else f"üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n‚è∞ –ù–∞—á–∞–ª–æ: {start_str}\n‚è∞ –ö–æ–Ω–µ—Ü: {end_str}"
    )
    await message.answer(text)
    await state.clear()
