from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Optional
from .utils import _wd_names, _t, _fmt_d
from datetime import date


def barber_services_keyboard(services: List, lang: str = "uz") -> InlineKeyboardMarkup:
    service_buttons = []

    for bs in services:
        # Get service name
        if lang == "ru":
            name = getattr(bs.service, "name_ru", None) or "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏"
            price = f"{bs.price} —Å—É–º" if bs.price else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            duration = f"{bs.duration} –º–∏–Ω" if bs.duration else "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        else:
            name = getattr(bs.service, "name_uz", None) or "Noma ºlum xizmat"
            price = f"{bs.price} so'm" if bs.price else "Narx belgilanmagan"
            duration = f"{bs.duration} daqiqa" if bs.duration else "Davomiylik belgilanmagan"

        # Show name ‚Äî price ‚Äî duration
        button_text = f"{name} ‚Äî {price} ‚Äî {duration}"
        callback_data = f"service_{bs.service.id}"

        service_buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

    return InlineKeyboardMarkup(inline_keyboard=service_buttons)


def barber_service_menu_keyboard(lang: str = "uz") -> ReplyKeyboardMarkup:
    if lang == "ru":
        add_service = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É"
        back = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    else:
        add_service = "‚ûï Xizmat qo‚Äòshish"
        back = "‚¨ÖÔ∏è Orqaga"

    keyboard = [
        [KeyboardButton(text=add_service),
         KeyboardButton(text=back)]
    ]

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True
    )


def service_selection_inline_keyboard(all_services, barber_services, lang="uz"):
    active_ids = {bs.service_id for bs in barber_services if bs.is_active}
    keyboard = []

    for service in all_services:
        is_active = service.id in active_ids
        mark = "‚úÖ" if is_active else "‚ùå"
        name = getattr(service, f"name_{lang}", None) or (
            service.name_uz if lang == "uz" else service.name_ru
        )
        button = InlineKeyboardButton(
            text=f"{mark} {name}",
            callback_data=f"toggle_service:{service.id}"
        )
        keyboard.append([button])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def price_action_keyboard(lang: str = "uz") -> ReplyKeyboardMarkup:
    if lang == "ru":
        buttons = [
            [
                KeyboardButton(text="‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É"),
                KeyboardButton(text="‚è± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
            ],
            [
                KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É"),
                KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            ],
        ]
    else:
        buttons = [
            [
                KeyboardButton(text="‚úèÔ∏è Narxni belgilash"),
                KeyboardButton(text="‚è± Davomiylikni belgilash"),
            ],
            [
                KeyboardButton(text="üóë Xizmatni o'chirish"),
                KeyboardButton(text="‚¨ÖÔ∏è Orqaga")
            ],
        ]

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def barber_info_keyboard(lang: str = "uz") -> ReplyKeyboardMarkup:
    lang = lang.lower()

    if lang == "ru":
        buttons = [
            [KeyboardButton(text="üìÑ –†–µ–∑—é–º–µ"), KeyboardButton(text="üñº –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è")],
            [KeyboardButton(text="üìÖ –†–∞–±–æ—á–∏–µ –¥–Ω–∏"), KeyboardButton(text="üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã")],
            [KeyboardButton(text="üìç –õ–æ–∫–∞—Ü–∏—è"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],

        ]
    else:  # default to Uzbek
        buttons = [
            [KeyboardButton(text="üìÑ Rezyume"), KeyboardButton(text="üñº Profil rasmi")],
            [KeyboardButton(text="üìÖ Ish kunlari"), KeyboardButton(text="üïí Ish vaqti")],
            [KeyboardButton(text="üìç Manzil"), KeyboardButton(text="‚¨ÖÔ∏è Orqaga")],

        ]

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def resume_keyboard(lang: str = "uz") -> ReplyKeyboardMarkup:
    if lang == "ru":
        buttons = [
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ]
    else:
        buttons = [
            [KeyboardButton(text="‚úèÔ∏è Rezyumeni tahrirlash"), KeyboardButton(text="‚¨ÖÔ∏è Orqaga")]
        ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def profile_image_keyboard(lang: str = "uz") -> ReplyKeyboardMarkup:
    if lang == "ru":
        buttons = [
            [KeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"),
             KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ]
    else:
        buttons = [
            [KeyboardButton(text="üñº Profil rasmini o‚Äòzgartirish"),
             KeyboardButton(text="‚¨ÖÔ∏è Orqaga")]
        ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def working_time_keyboard(lang: str = "uz") -> ReplyKeyboardMarkup:
    lang = lang.lower()
    if lang == "ru":
        buttons = [
            [KeyboardButton(text="‚è± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è"),
             KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ]
    else:
        buttons = [
            [KeyboardButton(text="‚è± Vaqt belgilash"),
             KeyboardButton(text="‚¨ÖÔ∏è Orqaga")]
        ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def barber_map_keyboard(lang: str = "uz") -> ReplyKeyboardMarkup:
    lang = lang.lower()

    if lang == "ru":
        buttons = [
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é"), KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ]
    else:  # Uzbek default
        buttons = [
            [KeyboardButton(text="‚úèÔ∏è Joylashuvni o'zgartirish"), KeyboardButton(text="‚úèÔ∏è Manzilni o'zgartirish")],
            [KeyboardButton(text="‚úèÔ∏è Salon nomini o'zgartirish"), KeyboardButton(text="‚¨ÖÔ∏è Orqaga")]
        ]

    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )


def location_request_keyboard(lang: str = "uz") -> ReplyKeyboardMarkup:
    lang = lang.lower()

    if lang == "ru":
        buttons = [
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True),
             KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ]
    else:  # Default to Uzbek
        buttons = [
            [KeyboardButton(text="üìç Joylashuvni yuborish", request_location=True),
             KeyboardButton(text="‚¨ÖÔ∏è Orqaga")]
        ]

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def barber_working_days_keyboard(days, lang: str = "uz") -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    for day in days:
        name = day.name_uz if lang == "uz" else day.name_ru
        status = "‚úÖ" if getattr(day, "is_working", False) else "‚ùå"
        builder.button(
            text=f"{status} {name}",
            callback_data=f"toggle_day:{day.id}"
        )

    builder.adjust(2)

    return builder.as_markup()


def request_row_kb(req_id: int, lang: str = "uz") -> InlineKeyboardMarkup:
    ru = (lang or "").lower().startswith("ru")

    text_accept = "‚úÖ –ü—Ä–∏–Ω—è—Ç—å" if ru else "‚úÖ Qabul qilish"
    text_deny = "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å" if ru else "‚ùå Rad etish"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=text_accept, callback_data=f"req:{req_id}:accept"),
            InlineKeyboardButton(text=text_deny, callback_data=f"req:{req_id}:deny"),
        ]
    ])
    return kb


def build_profile_button(client_user, lang: str = "uz") -> Optional[InlineKeyboardButton]:
    # Python 3.9-friendly: remove the "|" and use Optional[InlineKeyboardButton] if needed
    ru = (lang or "").lower().startswith("ru")
    text = "üîó –ü—Ä–æ—Ñ–∏–ª—å –≤ Telegram" if ru else "üîó Telegram profili"

    username = getattr(client_user, "username", None)
    tg_id = getattr(client_user, "telegram_id", None)

    if username:
        url = f"https://t.me/{username.lstrip('@')}"  # official profile link
        return InlineKeyboardButton(text=text, url=url)
    elif tg_id:
        # Fallback ‚Äì deep link (works in most clients, not a public profile link)
        return InlineKeyboardButton(text=text, url=f"tg://user?id={tg_id}")
    return None


def kb_week_days(days: List[date], working_map: dict, lang: str) -> InlineKeyboardMarkup:
    """
    working_map: { day_date -> bool } (True if working)
    """
    wd_names = _wd_names(lang)
    rows = []
    for d in days:
        idx = d.weekday()  # 0..6
        label = wd_names[idx]
        mark = "‚úÖ" if working_map.get(d, False) else "‚ùå"
        btn = InlineKeyboardButton(
            text=f"{mark} {label} ‚Ä¢ {_fmt_d(d)}",
            callback_data=f"sched:day:{_fmt_d(d)}:p1"
        )
        rows.append([btn])

    return InlineKeyboardMarkup(inline_keyboard=rows)


def kb_requests_paged(selected_day: date, page: int, max_page: int, lang: str) -> InlineKeyboardMarkup:
    prev_btn = InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"sched:day:{_fmt_d(selected_day)}:p{max(1, page - 1)}")
    page_btn = InlineKeyboardButton(text=_t(lang, f"Sahifa {page}/{max_page}", f"–°—Ç—Ä. {page}/{max_page}"),
                                    callback_data="sched:nop")
    next_btn = InlineKeyboardButton(text="‚ñ∂Ô∏è",
                                    callback_data=f"sched:day:{_fmt_d(selected_day)}:p{min(max_page, page + 1)}")
    back_btn = InlineKeyboardButton(text=_t(lang, "‚¨ÖÔ∏è Haftaga qaytish", "‚¨ÖÔ∏è –ö –Ω–µ–¥–µ–ª–µ"), callback_data="sched:back")

    rows = []
    if max_page > 1:
        rows.append([prev_btn, page_btn, next_btn])
    rows.append([back_btn])
    return InlineKeyboardMarkup(inline_keyboard=rows)
