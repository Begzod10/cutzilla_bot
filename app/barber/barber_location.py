from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy import select

from app.db import AsyncSessionLocal
from app.barber.models import Barber
from app.user.models import User
from .keyboards import barber_map_keyboard, location_request_keyboard
from app.basic.keyboards import back_keyboard
from app.states import ChangeLocation, EditAddress
from app.client.utils import get_region_city_multilang

import os

barber_location = Router()


@barber_location.message(F.text.in_(['üìç Manzil', 'üìç –õ–æ–∫–∞—Ü–∏—è']))
async def get_location(message: Message, state: FSMContext):
    lang = "ru" if message.text == "üìç –õ–æ–∫–∞—Ü–∏—è" else "uz"
    redis_pool = message.bot.redis

    async with AsyncSessionLocal() as session:
        # user
        user = (
            await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
        ).scalar_one_or_none()

        if not user:
            await message.answer("‚ùå Foydalanuvchi topilmadi." if lang == "uz" else "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # barber
        barber = (
            await session.execute(
                select(Barber).where(Barber.user_id == user.id, Barber.login == user.platform_login)
            )
        ).scalar_one_or_none()

    await redis_pool.set(f"user:{message.from_user.id}:last_action", "barber_location")

    if barber and barber.latitude and barber.longitude:
        await message.answer_venue(
            latitude=barber.latitude,
            longitude=barber.longitude,
            title=barber.location_title or ("–ú–æ–π —Å–∞–ª–æ–Ω" if lang == "ru" else "Mening salonim"),
            address=barber.address or ("–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω" if lang == "ru" else "Manzil kiritilmagan")
        )
        await message.answer(".", reply_markup=barber_map_keyboard(lang))
    else:
        await message.answer(
            "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" if lang == "ru" else "‚ùå Joylashuv topilmadi",
            reply_markup=barber_map_keyboard(lang)
        )


@barber_location.message(F.text.in_(["‚úèÔ∏è Joylashuvni o'zgartirish", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é"]))
async def ask_for_location(message: Message, state: FSMContext):
    redis_pool = message.bot.redis

    async with AsyncSessionLocal() as session:
        user = (
            await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
        ).scalar_one_or_none()

    lang = (user.lang if user else "uz")
    await redis_pool.set(f"user:{message.from_user.id}:last_action", "barber_location_change")

    text = "‚úèÔ∏è Joylashuvni o'zgartirish" if lang == "uz" else "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é"
    await message.answer(text, reply_markup=location_request_keyboard(lang))
    await state.set_state(ChangeLocation.waiting_for_location)


@barber_location.message(ChangeLocation.waiting_for_location, F.location)
async def save_barber_location(message: Message, state: FSMContext):
    latitude = message.location.latitude
    longitude = message.location.longitude

    async with AsyncSessionLocal() as session:
        user = (
            await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
        ).scalar_one_or_none()

        barber = (
            await session.execute(
                select(Barber).where(
                    Barber.user_id == user.id, Barber.login == user.platform_login
                )
            )
        ).scalar_one_or_none()

        # üîπ call the new Yandex-backed function
        country, region, city = await get_region_city_multilang(session, latitude, longitude)

        # Save on user
        user.country_id = country.id
        user.region_id = region.id
        user.city_id = city.id

        # Save on barber
        barber.latitude = latitude
        barber.longitude = longitude

        await session.commit()

        await message.answer(
            "‚úÖ Joylashuv saqlandi!" if user.lang == "uz" else "‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
            reply_markup=barber_map_keyboard(user.lang),
        )
        await message.answer_location(latitude=latitude, longitude=longitude)

    await state.clear()



@barber_location.message(ChangeLocation.waiting_for_location)
async def invalid_location(message: Message):
    await message.answer(
        "‚ùó Iltimos, joylashuvni yuboring üìç" if (message.from_user.language_code or "uz") == "uz"
        else "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é üìç"
    )


@barber_location.message(F.text.in_(["‚úèÔ∏è Manzilni o'zgartirish", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å"]))
async def ask_new_address(message: Message, state: FSMContext):
    lang = "ru" if message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å" else "uz"
    await message.answer("Yangi manzilingizni kiriting:" if lang == "uz" else "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
    await state.set_state(EditAddress.waiting_for_address)


@barber_location.message(EditAddress.waiting_for_address)
async def save_new_address(message: Message, state: FSMContext):
    new_address = (message.text or "").strip()

    async with AsyncSessionLocal() as session:
        user = (
            await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
        ).scalar_one_or_none()
        if not user:
            await message.answer("‚ùå Foydalanuvchi topilmadi.")
            return

        barber = (
            await session.execute(
                select(Barber).where(Barber.user_id == user.id, Barber.login == user.platform_login)
            )
        ).scalar_one_or_none()
        if not barber:
            await message.answer("‚ùå Sartarosh topilmadi." if (user.lang or "uz") == "uz" else "‚ùå –ë–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        barber.address = new_address
        await session.commit()

        lang = user.lang or "uz"
        await message.answer(
            "‚úÖ Manzil yangilandi." if lang == "uz" else "‚úÖ –ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω.",
            reply_markup=barber_map_keyboard(lang)
        )

        if barber.latitude and barber.longitude:
            await message.answer_venue(
                latitude=barber.latitude,
                longitude=barber.longitude,
                title=barber.location_title or ("–ú–æ–π —Å–∞–ª–æ–Ω" if lang == "ru" else "Mening salonim"),
                address=barber.address or ("–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω" if lang == "ru" else "Manzil kiritilmagan")
            )

    await state.clear()


@barber_location.message(F.text.in_(["‚úèÔ∏è Salon nomini o'zgartirish", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞"]))
async def change_barber_name(message: Message, state: FSMContext):
    lang = "ru" if message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞" else "uz"
    await message.answer("Salon nomini kiriting:" if lang == "uz" else "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞:")
    await state.set_state(EditAddress.waiting_for_location_name)


@barber_location.message(EditAddress.waiting_for_location_name)
async def save_location_title(message: Message, state: FSMContext):
    title = (message.text or "").strip()

    async with AsyncSessionLocal() as session:
        user = (
            await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
        ).scalar_one_or_none()
        if not user:
            await message.answer("‚ùå Foydalanuvchi topilmadi.")
            return

        barber = (
            await session.execute(
                select(Barber).where(Barber.user_id == user.id, Barber.login == user.platform_login)
            )
        ).scalar_one_or_none()
        if not barber:
            await message.answer("‚ùå Sartarosh topilmadi." if (user.lang or "uz") == "uz" else "‚ùå –ë–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        barber.location_title = title
        await session.commit()

        lang = user.lang or "uz"
        await message.answer(
            "‚úÖ Salon nomi yangilandi." if lang == "uz" else "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
            reply_markup=barber_map_keyboard(lang)
        )

        if barber.latitude and barber.longitude:
            await message.answer_venue(
                latitude=barber.latitude,
                longitude=barber.longitude,
                title=barber.location_title or ("–ú–æ–π —Å–∞–ª–æ–Ω" if lang == "ru" else "Mening salonim"),
                address=barber.address or ("–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω" if lang == "ru" else "Manzil kiritilmagan")
            )

    await state.clear()
