from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, Message
from sqlalchemy import select
from app.barber.models import Barber
from app.user.models import User
from .keyboards import profile_image_keyboard
from app.basic.keyboards import back_keyboard
from app.states import FileUpload
from app.db import AsyncSessionLocal
import os

barber_photo_router = Router()


@barber_photo_router.message(F.text.in_(['üñº Profil rasmi', 'üñº –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è']))
async def show_resume(message: Message):
    redis_pool = message.bot.redis
    async with AsyncSessionLocal() as session:
        user_obj = (
            await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
        ).scalar_one_or_none()
        if not user_obj:
            await message.answer("‚ùå Foydalanuvchi topilmadi." if message.from_user.language_code == "uz"
                                 else "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        barber = (
            await session.execute(
                select(Barber).where(Barber.user_id == user_obj.id)
            )
        ).scalar_one_or_none()

        text = "Profil rasmi:" if user_obj.lang == "uz" else "–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:"
        await redis_pool.set(f"user:{user_obj.telegram_id}:last_action", "barber_photo")

        if barber and barber.img:
            img_path = os.path.abspath(barber.img)
            if os.path.isfile(img_path):
                try:
                    file = FSInputFile(img_path)
                    await message.answer_photo(file, caption=text, reply_markup=profile_image_keyboard(user_obj.lang))
                except Exception:
                    await message.answer(
                        f"{text}\n‚ùó Faylni yuborib bo‚Äòlmadi." if user_obj.lang == "uz"
                        else f"{text}\n‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.",
                        reply_markup=profile_image_keyboard(user_obj.lang)
                    )
            else:
                await message.answer(
                    f"{text}\n‚ùó Profil rasmi topilmadi." if user_obj.lang == "uz"
                    else f"{text}\n‚ùó –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–æ.",
                    reply_markup=profile_image_keyboard(user_obj.lang)
                )
        else:
            await message.answer(
                f"{text}\n‚ùó Profil rasmi topilmadi." if user_obj.lang == "uz"
                else f"{text}\n‚ùó –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–æ.",
                reply_markup=profile_image_keyboard(user_obj.lang)
            )


@barber_photo_router.message(F.text.in_(['üñº Profil rasmini o‚Äòzgartirish', 'üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è']))
async def edit_photo(message: Message, state: FSMContext):
    redis_pool = message.bot.redis
    async with AsyncSessionLocal() as session:
        user_obj = (
            await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
        ).scalar_one_or_none()
        lang = user_obj.lang or "uz" if user_obj else "uz"
        if user_obj:
            await redis_pool.set(f"user:{user_obj.telegram_id}:last_action", "barber_photo")

    text = (
        "üì∏ Iltimos, yangi profil rasmingizni yuboring.\n\n"
        "‚úÖ Tavsiya etilgan formatlar: JPG, PNG yoki WEBP\n"
        "‚õîÔ∏è GIF, SVG, HEIC va boshqa noodatiy formatlar yuborilmasin.\n\n"
        "Maksimal hajm ‚Äî 5MB gacha."
        if lang == "uz"
        else
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
        "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG –∏–ª–∏ WEBP\n"
        "‚õîÔ∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å GIF, SVG, HEIC –∏ –¥—Ä—É–≥–∏–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã.\n\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî –¥–æ 5MB."
    )
    await message.answer(text, reply_markup=back_keyboard(lang))
    await state.set_state(FileUpload.waiting_for_file)


@barber_photo_router.message(FileUpload.waiting_for_file, F.photo)
async def handle_profile_photo_upload(message: Message, state: FSMContext, bot: Bot):
    MAX_FILE_SIZE = 5 * 1024 * 1024  # 5 MB
    UPLOAD_FOLDER = "static/profile_photos/"
    os.makedirs(UPLOAD_FOLDER, exist_ok=True)

    photo = message.photo[-1]
    file_size = photo.file_size
    lang = message.from_user.language_code or "uz"

    # ‚úÖ Check size
    if file_size > MAX_FILE_SIZE:
        await message.answer(
            "‚ùó Rasm hajmi 5MB dan oshmasligi kerak!" if lang == "uz"
            else "‚ùó –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB!"
        )
        return

    # ‚úÖ Download file
    file_info = await bot.get_file(photo.file_id)
    extension = ".jpg"
    file_path = os.path.join(UPLOAD_FOLDER, f"{message.from_user.id}{extension}")
    downloaded_file = await bot.download_file(file_info.file_path)

    with open(file_path, "wb") as f:
        f.write(downloaded_file.read())

    # ‚úÖ Save in DB
    async with AsyncSessionLocal() as session:
        user_obj = (
            await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
        ).scalar_one_or_none()
        if not user_obj:
            await message.answer("‚ùå User not found.")
            return

        barber_obj = (
            await session.execute(
                select(Barber).where(Barber.user_id == user_obj.id)
            )
        ).scalar_one_or_none()
        if barber_obj:
            barber_obj.img = file_path
            await session.commit()

        text_success = "‚úÖ Profil rasmi muvaffaqiyatli saqlandi!" if lang == "uz" else "‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
        caption = "Profil rasmi:" if lang == "uz" else "–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:"

    await message.answer(text_success)
    await message.answer_photo(FSInputFile(file_path), caption=caption, reply_markup=profile_image_keyboard(lang))
    await state.clear()
